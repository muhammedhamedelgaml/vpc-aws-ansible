---
- name: setup vprofile stack 
  hosts: localhost
  connection: local
  gather_facts: no 

  tasks:
   - name: include vpc vars 
     ansible.builtin.include_vars:  vars/output_vars

   - name: include vpro-stack vars 
     ansible.builtin.include_vars:  vars/vpro-stack-setup 

   - name: create key for vprofile ec2 
     amazon.aws.ec2_key:
      name: vprokey
      region: "{{region}}"
     register: vprokey_out


   - name: save private key in file
     ansible.builtin.copy:
      content: "{{vprokey_out.key.private_key}}"   
      dest: ./vprokey.pem
      mode: 0600 
     when: vprokey.changed 


   - name: create SG for load balancer
     amazon.aws.ec2_group:
      name: vproLB-SG
      description: allow port 80 from everywhere and all port within SG
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      purge_rules: no  ## for idempotent // to not update it 
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80 
          cidr_ip: 0.0.0.0/0
     register: vproLB-SG_out


   - name: create SG for vprofile stack 
     amazon.aws.ec2_group:
      name: vproStack-SG
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      purge_rules: no
      rules:  ## allow port 80 from LB SG
        - proto: tcp
          from_port: 80
          to_port: 80 
          group_id: "{{vproLB-SG_out.group_id}}"
     
        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{bastionSGid}}"
     register: vproStack-SG_out              


          ## FOR interact with each others 
   - name: update vpro-stack SG with it's own sg id    
     amazon.aws.ec2_group:
      name: vproStack-SG
      region: "{{region}}"
      vpc_id: "{{vpcid}}"
      purge_rules: no
      rules:  
        - proto: all
          group_id: "{{vproStack-SG_out.group_id}}"



                        ################################## 
                        ## instances 

   - name: create nginx web01
     amazon.aws.ec2_instance:
      name: web01
      key_name: vprokey
      region: "{{region}}"
      instance_type: t2.mirco 
      image: "{{nginx_ami}}"
      wait: yes
      wait_timeout: 200
      tags:
       name: "web01"
       project: "vprofile"
      exact_count:  1
      security_group: "{{vproStack-SG_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
     register: nginx_out

   - name: create tomcat  app01
     amazon.aws.ec2_instance:
      name: app01
      key_name: vprokey
      region: "{{region}}"
      instance_type: t2.mirco 
      image: "{{tomcat_ami}}"
      wait: yes
      wait_timeout: 200
      tags:
       name: "app01"
       project: "vprofile"
      exact_count:  1
      security_group: "{{vproStack-SG_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
     register: tomcat_out        


   - name: create memcache  mc01
     amazon.aws.ec2_instance:
      name: mc01
      key_name: vprokey
      region: "{{region}}"
      instance_type: t2.mirco 
      image: "{{memcache_ami}}"
      wait: yes
      wait_timeout: 200
      tags:
       name: mc01"
       project: "vprofile"
      exact_count:  1
      security_group: "{{vproStack-SG_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
     register: memcache_out        


   - name: create rabbitmq  rmq01
     amazon.aws.ec2_instance:
      name: rmq01
      key_name: vprokey
      region: "{{region}}"
      instance_type: t2.mirco 
      image: "{{rmq_ami}}"
      wait: yes
      wait_timeout: 200
      tags:
       name: "rmq01"
       project: "vprofile"
      exact_count:  1
      security_group: "{{vproStack-SG_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
     register: rabbitmq_out        


   - name: create mysql  db01
     amazon.aws.ec2_instance:
      name: db01
      key_name: vprokey
      region: "{{region}}"
      instance_type: t2.mirco 
      image: "{{mysql_ami}}"
      wait: yes
      wait_timeout: 200
      tags:
       name: "db01"
       project: "vprofile"
      exact_count:  1
      security_group: "{{vproStack-SG_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
     register: mysql_out  


  #  - name: print vars
  #    ansible.builtin.debug:
  #     var: nginx_out.tagged_instances[0].id

